{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{authService}from'../services/authService';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[stats,setStats]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{const initAuth=async()=>{const token=localStorage.getItem('token');if(token){try{await refreshUser();}catch(error){localStorage.removeItem('token');}}setLoading(false);};initAuth();},[]);const login=async(email,password)=>{const response=await authService.login(email,password);localStorage.setItem('token',response.token);setUser(response.user);await refreshUser();};const register=async(name,email,password,passwordConfirmation)=>{const response=await authService.register(name,email,password,passwordConfirmation);localStorage.setItem('token',response.token);setUser(response.user);await refreshUser();};const logout=async()=>{try{await authService.logout();}catch(error){// Ignore logout errors\n}localStorage.removeItem('token');setUser(null);setStats(null);};const refreshUser=async()=>{try{const response=await authService.me();setUser(response.user);setStats(response.stats);}catch(error){localStorage.removeItem('token');setUser(null);setStats(null);throw error;}};const value={user,stats,loading,login,register,logout,refreshUser};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","authService","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","stats","setStats","loading","setLoading","initAuth","token","localStorage","getItem","refreshUser","error","removeItem","login","email","password","response","setItem","register","name","passwordConfirmation","logout","me","value","Provider"],"sources":["/workspace/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { authService } from '../services/authService';\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  avatar_url?: string;\n  plan: 'free' | 'pro' | 'enterprise';\n  credits_used: number;\n  credits_limit: number;\n}\n\ninterface UserStats {\n  total_loops: number;\n  active_loops: number;\n  published_loops: number;\n  total_executions: number;\n  credits_remaining: number;\n  credits_percentage: number;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  stats: UserStats | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (name: string, email: string, password: string, passwordConfirmation: string) => Promise<void>;\n  logout: () => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [stats, setStats] = useState<UserStats | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          await refreshUser();\n        } catch (error) {\n          localStorage.removeItem('token');\n        }\n      }\n      setLoading(false);\n    };\n\n    initAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    const response = await authService.login(email, password);\n    localStorage.setItem('token', response.token);\n    setUser(response.user);\n    await refreshUser();\n  };\n\n  const register = async (name: string, email: string, password: string, passwordConfirmation: string) => {\n    const response = await authService.register(name, email, password, passwordConfirmation);\n    localStorage.setItem('token', response.token);\n    setUser(response.user);\n    await refreshUser();\n  };\n\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      // Ignore logout errors\n    }\n    localStorage.removeItem('token');\n    setUser(null);\n    setStats(null);\n  };\n\n  const refreshUser = async () => {\n    try {\n      const response = await authService.me();\n      setUser(response.user);\n      setStats(response.stats);\n    } catch (error) {\n      localStorage.removeItem('token');\n      setUser(null);\n      setStats(null);\n      throw error;\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    stats,\n    loading,\n    login,\n    register,\n    logout,\n    refreshUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}